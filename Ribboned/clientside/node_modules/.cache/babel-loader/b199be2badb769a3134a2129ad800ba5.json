{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\CJ\\\\workspace\\\\csharp\\\\Ribboned\\\\Ribboned\\\\clientside\\\\src\\\\components\\\\Ribbon\\\\RibbonDetail.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useRef, useEffect } from \"react\";\nimport ReactPlayer from \"react-player\";\nimport { Button } from \"reactstrap\";\nexport const RibbonDetail = () => {\n  _s();\n\n  const [state, setState] = useState({\n    playing: false,\n    seeking: false,\n    duration: 0\n  });\n  const [timeDisplayFormat, setTimeDisplayformat] = useState(\"normal\");\n  const {\n    playing,\n    played,\n    seeking\n  } = state;\n  const playerRef = useRef(null); //play pause toggle\n\n  const handlePlayPause = () => {\n    setState({ ...state,\n      playing: !state.playing\n    });\n  }; //format time\n\n\n  const format = seconds => {\n    if (isNaN(seconds)) {\n      return \"00:00\";\n    } //set formatting\n\n\n    const date = new Date(seconds * 1000);\n    const hh = date.getUTCHours();\n    const mm = date.getUTCMinutes();\n    const ss = date.getUTCSeconds().toString().padStart(2, \"0\");\n\n    if (hh) {\n      return `$${hh}:${mm.toString().padStart(2, \"0\")}:${ss}`;\n    }\n\n    return `${mm}:${ss}`;\n  }; //get current time\n\n\n  const currentTime = playerRef && playerRef.current ? playerRef.current.getCurrentTime() : \"00:00\"; //duration\n\n  const duration = playerRef && playerRef.current ? playerRef.current.getDuration() : \"00:00\"; //elpsed time\n\n  const elapsedTime = timeDisplayFormat == \"normal\" ? format(currentTime) : `-${format(duration - currentTime)}`;\n\n  const handleProgress = changeState => {\n    if (!state.seeking) {\n      setState({ ...state,\n        ...changeState\n      });\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container \",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"text-center\",\n        children: \"Ribbon Title\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"d-flex justify-content-center\",\n          children: /*#__PURE__*/_jsxDEV(ReactPlayer, {\n            ref: playerRef // muted={true}\n            ,\n            playing: playing,\n            controls: true,\n            url: \"https://www.youtube.com/watch?v=ysz5S6PUM-U\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 66,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"text-center m-3\",\n          children: /*#__PURE__*/_jsxDEV(Button, {\n            className: \"btn btn-lg w-50\",\n            onClick: handlePlayPause,\n            children: playing ? `Add Snag` : \"Continue\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 75,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n};\n\n_s(RibbonDetail, \"k9xeeXuBn8pCUldrtepkXyEVUqI=\");\n\n_c = RibbonDetail;\n\nvar _c;\n\n$RefreshReg$(_c, \"RibbonDetail\");","map":{"version":3,"sources":["C:/Users/CJ/workspace/csharp/Ribboned/Ribboned/clientside/src/components/Ribbon/RibbonDetail.js"],"names":["React","useState","useRef","useEffect","ReactPlayer","Button","RibbonDetail","state","setState","playing","seeking","duration","timeDisplayFormat","setTimeDisplayformat","played","playerRef","handlePlayPause","format","seconds","isNaN","date","Date","hh","getUTCHours","mm","getUTCMinutes","ss","getUTCSeconds","toString","padStart","currentTime","current","getCurrentTime","getDuration","elapsedTime","handleProgress","changeState"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,MAA1B,EAAkCC,SAAlC,QAAmD,OAAnD;AACA,OAAOC,WAAP,MAAwB,cAAxB;AACA,SAASC,MAAT,QAAuB,YAAvB;AAEA,OAAO,MAAMC,YAAY,GAAG,MAAM;AAAA;;AAChC,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBP,QAAQ,CAAC;AACjCQ,IAAAA,OAAO,EAAE,KADwB;AAEjCC,IAAAA,OAAO,EAAE,KAFwB;AAGjCC,IAAAA,QAAQ,EAAE;AAHuB,GAAD,CAAlC;AAKA,QAAM,CAACC,iBAAD,EAAoBC,oBAApB,IAA4CZ,QAAQ,CAAC,QAAD,CAA1D;AACA,QAAM;AAAEQ,IAAAA,OAAF;AAAWK,IAAAA,MAAX;AAAmBJ,IAAAA;AAAnB,MAA+BH,KAArC;AACA,QAAMQ,SAAS,GAAGb,MAAM,CAAC,IAAD,CAAxB,CARgC,CAUhC;;AACA,QAAMc,eAAe,GAAG,MAAM;AAC5BR,IAAAA,QAAQ,CAAC,EAAE,GAAGD,KAAL;AAAYE,MAAAA,OAAO,EAAE,CAACF,KAAK,CAACE;AAA5B,KAAD,CAAR;AACD,GAFD,CAXgC,CAehC;;;AACA,QAAMQ,MAAM,GAAIC,OAAD,IAAa;AAC1B,QAAIC,KAAK,CAACD,OAAD,CAAT,EAAoB;AAClB,aAAO,OAAP;AACD,KAHyB,CAK1B;;;AACA,UAAME,IAAI,GAAG,IAAIC,IAAJ,CAASH,OAAO,GAAG,IAAnB,CAAb;AACA,UAAMI,EAAE,GAAGF,IAAI,CAACG,WAAL,EAAX;AACA,UAAMC,EAAE,GAAGJ,IAAI,CAACK,aAAL,EAAX;AACA,UAAMC,EAAE,GAAGN,IAAI,CAACO,aAAL,GAAqBC,QAArB,GAAgCC,QAAhC,CAAyC,CAAzC,EAA4C,GAA5C,CAAX;;AAEA,QAAIP,EAAJ,EAAQ;AACN,aAAQ,IAAGA,EAAG,IAAGE,EAAE,CAACI,QAAH,GAAcC,QAAd,CAAuB,CAAvB,EAA0B,GAA1B,CAA+B,IAAGH,EAAG,EAAtD;AACD;;AACD,WAAQ,GAAEF,EAAG,IAAGE,EAAG,EAAnB;AACD,GAfD,CAhBgC,CAiChC;;;AACA,QAAMI,WAAW,GACff,SAAS,IAAIA,SAAS,CAACgB,OAAvB,GACIhB,SAAS,CAACgB,OAAV,CAAkBC,cAAlB,EADJ,GAEI,OAHN,CAlCgC,CAuChC;;AACA,QAAMrB,QAAQ,GACZI,SAAS,IAAIA,SAAS,CAACgB,OAAvB,GAAiChB,SAAS,CAACgB,OAAV,CAAkBE,WAAlB,EAAjC,GAAmE,OADrE,CAxCgC,CA2ChC;;AACA,QAAMC,WAAW,GACftB,iBAAiB,IAAI,QAArB,GACIK,MAAM,CAACa,WAAD,CADV,GAEK,IAAGb,MAAM,CAACN,QAAQ,GAAGmB,WAAZ,CAAyB,EAHzC;;AAKA,QAAMK,cAAc,GAAIC,WAAD,IAAiB;AACtC,QAAI,CAAC7B,KAAK,CAACG,OAAX,EAAoB;AAClBF,MAAAA,QAAQ,CAAC,EAAE,GAAGD,KAAL;AAAY,WAAG6B;AAAf,OAAD,CAAR;AACD;AACF,GAJD;;AAMA,sBACE;AAAA,2BACE;AAAK,MAAA,SAAS,EAAC,YAAf;AAAA,8BACE;AAAI,QAAA,SAAS,EAAC,aAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AAAA,gCACE;AAAK,UAAA,SAAS,EAAC,+BAAf;AAAA,iCACE,QAAC,WAAD;AACE,YAAA,GAAG,EAAErB,SADP,CAEE;AAFF;AAGE,YAAA,OAAO,EAAEN,OAHX;AAIE,YAAA,QAAQ,EAAE,IAJZ;AAKE,YAAA,GAAG,EAAC;AALN;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,gBADF,eAUE;AAAK,UAAA,SAAS,EAAC,iBAAf;AAAA,iCACE,QAAC,MAAD;AAAQ,YAAA,SAAS,EAAC,iBAAlB;AAAoC,YAAA,OAAO,EAAEO,eAA7C;AAAA,sBACGP,OAAO,GAAI,UAAJ,GAAgB;AAD1B;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,gBAVF;AAAA;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF,mBADF;AAuBD,CA9EM;;GAAMH,Y;;KAAAA,Y","sourcesContent":["import React, { useState, useRef, useEffect } from \"react\";\r\nimport ReactPlayer from \"react-player\";\r\nimport { Button } from \"reactstrap\";\r\n\r\nexport const RibbonDetail = () => {\r\n  const [state, setState] = useState({\r\n    playing: false,\r\n    seeking: false,\r\n    duration: 0,\r\n  });\r\n  const [timeDisplayFormat, setTimeDisplayformat] = useState(\"normal\");\r\n  const { playing, played, seeking } = state;\r\n  const playerRef = useRef(null);\r\n\r\n  //play pause toggle\r\n  const handlePlayPause = () => {\r\n    setState({ ...state, playing: !state.playing });\r\n  };\r\n\r\n  //format time\r\n  const format = (seconds) => {\r\n    if (isNaN(seconds)) {\r\n      return \"00:00\";\r\n    }\r\n\r\n    //set formatting\r\n    const date = new Date(seconds * 1000);\r\n    const hh = date.getUTCHours();\r\n    const mm = date.getUTCMinutes();\r\n    const ss = date.getUTCSeconds().toString().padStart(2, \"0\");\r\n\r\n    if (hh) {\r\n      return `$${hh}:${mm.toString().padStart(2, \"0\")}:${ss}`;\r\n    }\r\n    return `${mm}:${ss}`;\r\n  };\r\n\r\n  //get current time\r\n  const currentTime =\r\n    playerRef && playerRef.current\r\n      ? playerRef.current.getCurrentTime()\r\n      : \"00:00\";\r\n\r\n  //duration\r\n  const duration =\r\n    playerRef && playerRef.current ? playerRef.current.getDuration() : \"00:00\";\r\n\r\n  //elpsed time\r\n  const elapsedTime =\r\n    timeDisplayFormat == \"normal\"\r\n      ? format(currentTime)\r\n      : `-${format(duration - currentTime)}`;\r\n\r\n  const handleProgress = (changeState) => {\r\n    if (!state.seeking) {\r\n      setState({ ...state, ...changeState });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className=\"container \">\r\n        <h1 className=\"text-center\">Ribbon Title</h1>\r\n        <div>\r\n          <div className=\"d-flex justify-content-center\">\r\n            <ReactPlayer\r\n              ref={playerRef}\r\n              // muted={true}\r\n              playing={playing}\r\n              controls={true}\r\n              url=\"https://www.youtube.com/watch?v=ysz5S6PUM-U\"\r\n            />\r\n          </div>\r\n          <div className=\"text-center m-3\">\r\n            <Button className=\"btn btn-lg w-50\" onClick={handlePlayPause}>\r\n              {playing ? `Add Snag` : \"Continue\"}\r\n            </Button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n"]},"metadata":{},"sourceType":"module"}